// File generated by the BNF Converter (bnfc 2.9.4.1).

package org.syntax.stella.Absyn;

import org.stella.typecheck.Declarations;

import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

public class TypeVariant  extends Type {
  public final ListVariantFieldType listvariantfieldtype_;
  public int line_num, col_num, offset;
  public TypeVariant(ListVariantFieldType p1) { listvariantfieldtype_ = p1; }

  public <R,A> R accept(Visitor<R,A> v, A arg) { return v.visit(this, arg); }

  public boolean equals(Object o) {
    if (this == o) return true;
    if (o instanceof TypeVariant ot) {
      listvariantfieldtype_.stream().forEach(varField -> {
        AVariantFieldType avar = (AVariantFieldType) varField;
        AVariantFieldType t = (AVariantFieldType) ot.listvariantfieldtype_.stream().filter(tmp -> avar.stellaident_.equals(((AVariantFieldType)tmp).stellaident_))
                .findFirst().orElseThrow(() -> new RuntimeException("ERROR_UNEXPECTED_VARIANT_LABEL"));
        if (!((SomeTyping) avar.optionaltyping_).type_.equals(((SomeTyping) t.optionaltyping_).type_)) {
          if (Declarations.subtypeEnabled) throw new RuntimeException("ERROR_UNEXPECTED_SUBTYPE");
          throw new RuntimeException("ERROR_UNEXPECTED_TYPE_FOR_EXPRESSION");
        }
      });
    }
    return true;
  }

  public int hashCode() {
    return this.listvariantfieldtype_.hashCode();
  }


}
