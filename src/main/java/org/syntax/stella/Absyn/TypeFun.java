// File generated by the BNF Converter (bnfc 2.9.4.1).

package org.syntax.stella.Absyn;

import org.stella.typecheck.Declarations;

public class TypeFun  extends Type {
  public final ListType listtype_;
  public final Type type_;
  public int line_num, col_num, offset;
  public TypeFun(ListType p1, Type p2) { listtype_ = p1; type_ = p2; }

  public <R,A> R accept(Visitor<R,A> v, A arg) { return v.visit(this, arg); }

  public boolean equals(Object o) {
    if (this == o) return true;
    if (o instanceof TypeBottom) return false;
    if (o instanceof TypeTop) return true;
    if (o instanceof TypeFun) {
      TypeFun x = (TypeFun)o;
      if (Declarations.isAuto(x.listtype_.get(0))) {
        x.listtype_.set(0, this.listtype_.get(0));
      }
      else if (Declarations.isAuto(this.listtype_.get(0))) {
        this.listtype_.set(0, x.listtype_.get(0));
      }
      return x.listtype_.get(0).equals(this.listtype_.get(0)) && this.type_.equals(x.type_);
    }
    return false;
  }

  public int hashCode() {
    return 37*(this.listtype_.hashCode())+this.type_.hashCode();
  }


}
